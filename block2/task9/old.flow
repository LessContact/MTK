import lingo/pegcode/driver;
import string;
import math/math;

export {
    ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArNeg, ArVar, ArInt;

    ArSum(left : ArExpr, right : ArExpr);
    ArMult(left : ArExpr, right : ArExpr);
    ArSub(left : ArExpr, right : ArExpr);
    ArDiv(left : ArExpr, right : ArExpr);

    ArNeg(val : ArExpr);
    ArVar(val : string);
    ArInt(val : int);

    ratNum : (numerator : int, denominator : int);

    sumRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum>;
    subRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum>;
    multRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum>;
    divRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum>;
    ratNum2s(rat : Maybe<ratNum>) -> string;
    calculate(e: ArExpr, vars : Tree<string, ratNum>) -> Maybe<ratNum>;
    ar2s(e: ArExpr) -> string;
    parser(str : string) -> ArExpr;

    diff(e : ArExpr, var : ArVar) -> ArExpr;
    simplify(e : ArExpr) -> ArExpr;
}

sumRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum> { // a/b + c/d
    if (isSome(left) && isSome(right)) {
        val1 = either(left, ratNum(0, 0));
        val2 = either(right, ratNum(0, 0));

        nok = lcm(val1.denominator, val2.denominator);
        // приведение к общему знаменателю
        newNumerator = nok / val1.denominator * val1.numerator + nok / val2.denominator * val2.numerator;
        newDenominator = nok;

        // сокращение дроби
        nod = iabs(gcd(newNumerator, newDenominator));
        Some(ratNum(newNumerator / nod, newDenominator / nod));
    } else {
        None();
    }
}

subRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum> { // a/b  - c/d
    if (isSome(left) && isSome(right)) {
        val1 = either(left, ratNum(0, 0));
        val2 = either(right, ratNum(0, 0));

        nok = lcm(val1.denominator, val2.denominator);
        // приведение к общему знаменателю
        newNumerator = nok / val1.denominator * val1.numerator - nok / val2.denominator * val2.numerator;
        newDenominator = nok;

        // сокращение дроби
        nod = iabs(gcd(newNumerator, newDenominator));
        Some(ratNum(newNumerator / nod, newDenominator / nod));
    } else {
        None();
    }
}

multRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum> { // a/b * c/d
    if (isSome(left) && isSome(right)) {
        val1 = either(left, ratNum(0, 0));
        val2 = either(right, ratNum(0, 0));

        nodAD = iabs(gcd(val1.numerator, val2.denominator));
        nodBC = iabs(gcd(val2.numerator, val1.denominator));
        newNumerator = val1.numerator / nodAD * val2.numerator / nodBC;
        newDenominator = val1.denominator / nodBC * val2.denominator / nodAD;

        // сокращение дроби
        nod = iabs(gcd(newNumerator, newDenominator));
        Some(ratNum(newNumerator / nod, newDenominator / nod));
    } else {
        None();
    }
}

divRatNum(left : Maybe<ratNum>, right : Maybe<ratNum>) -> Maybe<ratNum> { // a/b / c/d
    if (isSome(left) && isSome(right)) {
        val1 = either(left, ratNum(0, 0));
        val2 = either(right, ratNum(0, 0));

        nodAC = iabs(gcd(val1.numerator, val2.numerator));
        nodBD = iabs(gcd(val1.denominator, val2.denominator));
        newNumerator = val1.numerator / nodAC * val2.denominator / nodBD;
        newDenominator = val1.denominator / nodBD * val2.numerator / nodAC;

        if (newDenominator == 0) {
            None();
        } else { // сокращение дроби
            nod = iabs(gcd(newNumerator, newDenominator));
            Some(ratNum(newNumerator / nod, newDenominator / nod));
        }
    } else {
        None();
    }
}

ratNum2s(rat : Maybe<ratNum>) -> string {
    newRat = either(rat, ratNum(0, 0));
    if (newRat.denominator == 0) 
        "ERROR (Division by zero)"
    else if (newRat.denominator == 1)
        i2s(newRat.numerator)
    else if (newRat.denominator < 0){
        newRat1 = (ratNum(-newRat.numerator, -newRat.denominator));
        i2s(newRat1.numerator) + "/" + i2s(newRat1.denominator);
    }
    else i2s(newRat.numerator) + "/" + i2s(newRat.denominator);
}

calculate(e: ArExpr, vars : Tree<string, ratNum>) -> Maybe<ratNum> {
    switch (e) {
        ArSum(left, right): sumRatNum(calculate(left, vars), calculate(right, vars));
        ArMult(left, right): multRatNum(calculate(left, vars), calculate(right, vars));
        ArSub(left, right): subRatNum(calculate(left, vars), calculate(right, vars));
        ArDiv(left, right): divRatNum(calculate(left, vars), calculate(right, vars));
        ArNeg(val): multRatNum(Some(ratNum(-1,1)), calculate(val, vars));
        ArVar(val): lookupTree(vars, val);
        ArInt(val): Some(ratNum(val, 1));
    }
}

ar2s(e: ArExpr) -> string {
    switch (e) {
        ArSum(left, right): "(" + ar2s(left) + "+" + ar2s(right) + ")";
        ArMult(left, right): "(" + ar2s(left) + "*" + ar2s(right) + ")";
        ArSub(left, right): "(" + ar2s(left) + "-" + ar2s(right) + ")";
        ArDiv(left, right): "(" + ar2s(left) + "/" + ar2s(right) + ")";
        ArNeg(val): "(-" + ar2s(val) + ")";
        ArVar(val): val;
        ArInt(val): i2s(val);
    }
}


diff(e : ArExpr, var : ArVar) -> ArExpr {
    switch(e) {
        ArMult(left, right) : ArSum(ArMult(diff(left, var), right), ArMult(left, diff(right, var)));
        ArSum(left, right) : ArSum(diff(left, var), diff(right, var));
        ArDiv(left, right) : ArDiv(ArSub(ArMult(diff(left, var), right), ArMult(left, diff(right, var))), ArMult(right, right));
        ArSub(left, right) : ArSub(diff(left, var), diff(right, var));
        ArNeg(val) : ArNeg(diff(val, var));
        ArInt(val) : ArInt(0);
        ArVar(val) : {
            if (val == var.val)
                ArInt(1)
            else
                ArVar(val);
        }
    }
}

maybe2val(m : Maybe<ratNum>) -> ratNum {
    switch (m) {
        Some(v): v;
        None(): ratNum(0, 0);
    }
}

simplify(e : ArExpr) -> ArExpr {
    switch(e) {
        ArMult(left, right) : {
            a = simplify(left);
            b = simplify(right);

            if (a == ArInt(0) || b == ArInt(0)) 
                ArInt(0)
            else if (a == ArInt(1))
                b
            else if (b == ArInt(1))
                a
            else if (a.structname == "ArInt" && b.structname == "ArMult") {
                Int = cast(a : ArExpr -> ArInt);
                Mult = cast(b : ArExpr -> ArMult);
                if (Mult.left.structname == "ArInt") { //a*(b*c)
                    Int2 = cast(Mult.left : ArExpr -> ArInt); //b
                    simplify(ArMult(ArInt(Int.val * Int2.val), Mult.right)); //(a*b)*c
                } else if (Mult.right.structname == "ArInt") {
                    Int2 = cast(Mult.right : ArExpr -> ArInt); //c
                    simplify(ArMult(ArInt(Int.val * Int2.val), Mult.left)); //(a*c)*b
                } else {
                    ArMult(a, b);
                }
            }
            else if (a.structname == "ArMult" && b.structname == "ArInt") {
                simplify(ArMult(b, a));
            } else if (a.structname == "ArInt" && b.structname == "ArInt") {
                Int1 = cast(a : ArExpr -> ArInt);
                Int2 = cast(b : ArExpr -> ArInt);
                ArInt(Int1.val * Int2.val);
            } else {
                ArMult(a, b);
            }
        }
        ArSum(left, right) : {
            a = simplify(left);
            b = simplify(right);

            if (a == ArInt(0))
                b
            else if (b == ArInt(0))
                a
            else if (a == b) {
                simplify(ArMult(ArInt(2), a));
            } else if (a.structname == "ArInt" && b.structname == "ArInt") {
                Int1 = cast(a : ArExpr -> ArInt);
                Int2 = cast(b : ArExpr -> ArInt);
                ArInt(Int1.val + Int2.val);
            }
            else if (a.structname == "ArInt" && b.structname == "ArSum") {
                Int = cast(a : ArExpr -> ArInt);
                Sum = cast(b : ArExpr -> ArSum);
                if (Sum.left.structname == "ArInt") {
                    Int2 = cast(Sum.left : ArExpr -> ArInt);
                    simplify(ArSum(ArInt(Int.val + Int2.val), Sum.right));
                } else if (Sum.right.structname == "ArInt") {
                    Int2 = cast(Sum.right : ArExpr -> ArInt);
                    simplify(ArSum(ArInt(Int.val + Int2.val), Sum.left));
                } else {
                    ArSum(a, b);
                }
            } else if (a.structname == "ArSum" && b.structname == "ArInt") {
                simplify(ArSum(b, a));
            } else if (a.structname == "ArSub" && b.structname == "ArInt") {
                Sub = cast(a : ArExpr -> ArSub);
                Int = cast(b : ArExpr -> ArInt);
                if (Sub.left.structname == "ArInt") { // (a-b)+c (a+(-b)+c)
                    Int2 = cast(Sub.left : ArExpr -> ArInt); // a == int
                    simplify(ArSub(ArInt(Int.val + Int2.val), Sub.right));//(a+c)-b
                } else if (Sub.right.structname == "ArInt") {
                    Int2 = cast(Sub.right : ArExpr -> ArInt); //b == int
                    simplify(ArSum(ArInt(Int.val - Int2.val), Sub.left)); //(c-b)+a
                } else {
                    ArSum(a, b);
                }
            } else if (a.structname == "ArInt" && b.structname == "ArSub") {
                simplify(ArSum(b, a));
            } else if (b.structname == "Neg") {
                neg = cast(b : ArExpr -> ArNeg);
                ArSub(a, neg.val);
            } else {
                ArSum(a, b);
            }
        }
        ArDiv(left, right) : {
            a = simplify(left);
            b = simplify(right);

            if (a == ArInt(0))
                ArInt(0)
            else if (a == b)
                ArInt(1)
            else if (a.structname == "ArInt" && b.structname == "ArInt") {
                Int1 = cast(a : ArExpr -> ArInt);
                Int2 = cast(b : ArExpr -> ArInt);
                ArInt(Int1.val / Int2.val);
            } else {
                ArDiv(a, b);
            }
        }
        ArNeg(val) : {
            if (val == ArInt(0))
                val
            else
                ArNeg(simplify(val));
        }
        ArSub(left, right) : simplify(ArSum(left, ArNeg(right)));
        ArInt(val) : ArInt(val);
        ArVar(val) : ArVar(val);
    }
}

parser(str : string) -> ArExpr {
    e_gr = "#include arith.lingo";
    parsic(
        compilePegGrammar(e_gr),
        str,
        defaultPegActions
    );
}
