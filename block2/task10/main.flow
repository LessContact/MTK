import old;

identity(from: ArExpr, to: ArExpr);

makeIdentitiesTree(identities: [identity]) -> Tree<ArExpr, ArExpr> {
    fold(identities, makeTree(), \acc, ident -> {
        setTree(acc, ident.from, ident.to)
        });
}

findIdentities(expr: ArExpr, identitiesTree : Tree<ArExpr, ArExpr>) -> ArExpr {
    result = switch(either(lookupTree(identitiesTree, expr), expr)) {
        ArSum(left, right): ArSum(findIdentities(left, identitiesTree), findIdentities(right, identitiesTree));
        ArSub(left, right): ArSub(findIdentities(left, identitiesTree), findIdentities(right, identitiesTree));
        ArMult(left, right): ArMult(findIdentities(left, identitiesTree), findIdentities(right, identitiesTree));
        ArDiv(left, right): ArDiv(findIdentities(left, identitiesTree), findIdentities(right, identitiesTree));
        ArNeg(val): ArNeg(findIdentities(val, identitiesTree));
        ArRatNum(n, d): either(lookupTree(identitiesTree, expr), ArRatNum(n, d));
        ArVar(val): either(lookupTree(identitiesTree, expr), ArVar(val));
    }

    foldTree(identitiesTree, result, \ident, value, acc -> {
        isMatch = findTemplates(ident, acc, makeTree());
        isMatch ?? resolveVars(value, isMatch) : acc;
    });
}

resolveVars(expr : ArExpr, varResolve : Tree<ArVar, ArExpr>) -> ArExpr {
    switch(expr) {
        ArSum(left, right): ArSum(resolveVars(left, varResolve), resolveVars(right, varResolve));
        ArSub(left, right): ArSub(resolveVars(left, varResolve), resolveVars(right, varResolve));
        ArDiv(left, right): ArDiv(resolveVars(left, varResolve), resolveVars(right, varResolve));
        ArMult(left, right): ArMult(resolveVars(left, varResolve), resolveVars(right, varResolve));
        ArRatNum(n,d): expr;
        ArVar(val): either(lookupTree(varResolve, expr), expr);
        ArNeg(val): {
            var = resolveVars(val, varResolve);
            switch(var) {
                ArRatNum(n,d): ArNeg(var);
                ArVar(v): ArNeg(var);
                default: ArNeg(ArRatNum(1,1));
            }
        }
    }
}

findTemplates(templ : ArExpr, expr : ArExpr, identitiesTree : Tree<ArVar, ArExpr>) -> Maybe<Tree<ArVar, ArExpr>> {
    switch(templ) {
        ArSum(left, right): {
            switch(expr) {
                ArSum(l, r): {
                    match = findTemplates(left, l, identitiesTree);     
                    match ?? findTemplates(right, r, match) : None();      
                } 
                default: None();
            }
        }
        ArSub(left, right): {
            switch(expr) {
                ArSub(l, r): {
                    match = findTemplates(left, l, identitiesTree); 
                    match ?? findTemplates(right, r, match) : None();  
                }
                default: None();
            }
        }
        ArMult(left, right): {
            switch(expr) {
                ArMult(l, r): {
                    match = findTemplates(left, l, identitiesTree); 
                    match ?? findTemplates(right, r, match) : None(); 
                }
                default: None();
            }
        }
        ArDiv(left, right): {
            switch(expr) {
                ArDiv(l, r): {
                    match = findTemplates(left, l, identitiesTree);
                    match ?? findTemplates(right, r, match) : None();  
                }
                default: None();
            }
        }
        ArRatNum(n,d): {
            switch(expr) {
                ArRatNum(n1,d1): {
                    if (templ == expr) {
                        Some(identitiesTree);
                    }
                    else {
                        None();
                    }
                }
                default: None();
            }
        }
        ArVar(var): {
            val = lookupTree(identitiesTree, templ);
            val ?? if (val == expr) Some(identitiesTree) else None() : Some(setTree(identitiesTree, templ, expr));
        }
        ArNeg(val): {
            switch(expr) {
                ArNeg(val2): findTemplates(val, val2, identitiesTree);
                default: None();
            }
        }
  }
}

main() {
    idenitities = [
        identity(parser("((x * x) - (y * y))"), parser("((x + y) * (x - y))")),
        identity(parser("(x / x)"), parser("1")),
        identity(parser("(x - x)"), parser("0")),

    ];

    // str = "(((x * x) - (y * y)) / ((x * x) - (y * y)))";
    // str = "((a+b)/(a+b))";
    // str = "((a * a) - (b * b))";
    // str = "((a * a) + (b * b))";
    str = "(((x*x) - (y*y)) + (((x * x) - (y * y)) / ((x * x) - (y * y))))";

    println("STR: " + str);
    expr = parser(str);
    println(expr);
    
    identExpr = findIdentities(expr, makeIdentitiesTree(idenitities));

    println("\nResult: " + ar2s(identExpr));
    quit(0);
}